#!/usr/bin/env bash
set -euo pipefail

if [[ $# -ne 1 ]]; then 
  echo "Usage: $0 <tsv_file>" >&2 
  exit 1
fi

file="$1"

if [[ ! -r "$file" ]]; then 
  echo "Error: File $file is not readable." >&2 
  exit 1
fi

awk -F'\t' ' 
  BEGIN { 
    #Initialize column indices 
    id_idx = 0 
    year_idx = 0 
    rating_idx = 0 
    comp_idx = 0 
    mech_idx = 0 
    domain_idx = 0 
  } 
  NR == 1 { 
    # Dynamically find column indices from header 
    for (i = 1; i <= NF; i++) { 
      if ($i == "Year Published") year_idx = i 
      if ($i == "Rating Average") rating_idx = i 
      if ($i == "Complexity Average") comp_idx = i 
      if ($i == "Mechanics") mech_idx = i 
      if ($i == "Domains") domain_idx = i 
    } 
    next 
  } 
  { 
    #Process Mechanics 
    if (mech_idx > 0) { 
      split($mech_idx, m_arr, ",") 
      for (i in m_arr) { 
        mech = m_arr[i] 
        gsub(/^[[:space:]]+|[[:space:]]+$/, "", mech) 
        if (mech != "") mech_count[mech]++ 
      } 
    } 
    # Process Domains 
    if (domain_idx > 0) { 
      split($domain_idx, d_arr, ",") 
      for (i in d_arr) { 
        dom = d_arr[i] 
        gsub(/^[[:space:]]+|[[:space:]]+$/, "", dom) 
        if (dom != "") dom_count[dom]++ 
      } 
    } 
    
    # Year vs Rating correlation 
    if (year_idx > 0 && rating_idx > 0) { 
      year = $year_idx 
      rating = $rating_idx 
      if (year ~ /^-?[1-9][0-9]*$/ && rating ~ /^[0-9.]+$/) { 
        n_year++ 
        sum_x += year 
        sum_y += rating 
        sum_xy += year * rating 
        sum_x2 += year * year 
        sum_y2 += rating * rating 
      } 
    } 
    
    #Complexity vs Rating correlation 
    if (comp_idx > 0 && rating_idx > 0) { 
      comp = $comp_idx 
      rating = $rating_idx 
      if (comp ~ /^[0-9.]+$/ && rating ~ /^[0-9.]+$/) { 
        n_comp++ 
        sum_xc += comp 
        sum_yc += rating 
        sum_xyc += comp * rating 
        sum_x2c += comp * comp 
        sum_y2c += rating * rating 
      } 
    } 
  } 
  END { 
    # Find top mechanics 
    max_m = 0 
    for (m in mech_count) { 
      if (mech_count[m] > max_m) { 
        max_m = mech_count[m] 
        top_m = m 
      } 
    } 
    
    
    # Find top domain 
    max_d = 0 
    for (d in dom_count) { 
      if (dom_count[d] > max_d) { 
        max_d = dom_count[d] 
        top_d = d 
      } 
    } 
    
    printf "The most popular game mechanics is %s found in %d games\n", top_m, max_m 
    printf "The most game domain is %s found in %d games\n\n", top_d, max_d 
    
    # Calculate Pearson correlation for year vs rating 
    if (n_year >= 2) { 
      cov = sum_xy - (sum_x * sum_y) / n_year 
      std_x = sqrt(sum_x2 - (sum_x^2) / n_year) 
      std_y = sqrt(sum_y2 - (sum_y^2) / n_year) 
      corr = (std_x * std_y != 0) ? cov / (std_x * std_y) : 0 
      printf "The correlation between publication year and average rating is %.3f\n", corr 
    } else { 
      print "Insufficient data for year-rating correlation" 
    } 
    
    # Calculate Pearson correlation for complexity vs rating 
    if (n_comp >= 2) { 
      covc = sum_xyc - (sum_xc * sum_yc) / n_comp 
      std_xc = sqrt(sum_x2c - (sum_xc^2) / n_comp) 
      std_yc = sqrt(sum_y2c - (sum_yc^2) / n_comp) 
      corrc = (std_xc * std_yc != 0) ? covc / (std_xc * std_yc) : 0 
      printf "The correlation between complexity and average rating is %.3f\n", corrc 
    } else { 
      print "Insufficient data for complexity-rating correlation" 
    } 
  }
' "$file"