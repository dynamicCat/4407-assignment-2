#!/usr/bin/env bash
set -euo pipefail



# preprocess â€” Clean Board Games Geek dataset
# - Convert CRLF to LF
# - Replace semicolon separators with tabs
# - Convert decimal commas to points
# - Remove non-ASCII characters
# - Generate new unique IDs for empty or non-numeric IDs

if [[ $# -ne 1 ]]; then
  echo "Usage: $0 <file>" >&2
  exit 1
fi
file="$1"
if [[ ! -r "$file" ]]; then
  echo "Error: Cannot read '$file'" >&2
  exit 1
fi

tmp=$(mktemp)
trap 'rm -f "$tmp"' EXIT


# Step 1: Clean input data
# - Remove CR (\r) for Unix line endings
# - Replace semicolon (;) with tab (\t)
# - Convert decimal comma (e.g., 12,34 to 12.34) while avoiding thousand separators
# - Remove non-ASCII characters, keep tab, newline, and ASCII 32-126
sed -E \
    -e 's/\r$//' \
    -e 's/;/\t/g' \
    -e 's/([0-9]+),([0-9]{2})\b/\1.\2/g' \
  "$file" \
| tr -cd $'\11\12\15\40-\176' > "$tmp"

# Step 2: Generate new IDs for empty or non-numeric IDs
# - Find maximum numeric ID
# - Assign new IDs starting from max_id + 1
max_id=$(awk -F'\t' 'NR>1 && $1 ~ /^[0-9]+$/ {if ($1>m) m=$1} END{print m+0}' "$tmp")
next_id=$((max_id + 1))

awk -F'\t' -v OFS='\t' -v new_id="$next_id" '
  NR == 1 {
    print
    next
  }
  $1 == "" || $1 !~ /^[0-9]+$/ {
    $1 = new_id++
  }
  { print }
' "$tmp"