#!/usr/bin/env bash
set -euo pipefail

#===============================================================================
# preprocess â€” Clean Board Games Geek dataset
#
# This script performs the following transformations on a semicolon-separated
# CSV file containing board game data:
#   1. Convert CRLF (Windows) line endings to LF (Unix)
#   2. Replace semicolon delimiters with tab characters
#   3. Convert decimal commas (e.g., 12,34) to decimal points (e.g., 12.34)
#   4. Remove all non-ASCII characters, preserving tabs and newlines
#   5. Generate new sequential numeric IDs for any rows with missing or
#      non-numeric IDs in the first column
#===============================================================================

# Check that exactly one argument (input file) is provided
if [[ $# -ne 1 ]]; then
  echo "Usage: $0 <file>" >&2
  exit 1
fi
file="$1"

# Verify the input file exists and is readable
if [[ ! -r "$file" ]]; then
  echo "Error: Cannot read '$file'" >&2
  exit 1
fi

# Create a temporary file for intermediate data and ensure it's cleaned up
tmp=$(mktemp)
trap 'rm -f "$tmp"' EXIT



# Step 1: Initial cleaning
# - Remove carriage returns (\r) to normalize line endings to LF
# - Convert semicolons (;) to tabs (\t) as field separators
# - Change decimal commas to decimal points for numeric fields
# - Strip any non-ASCII bytes, keeping tabs (0x09), newlines (0x0A,0x0D),
#   and printable ASCII (0x20-0x7E)
sed -E \
    -e 's/\r$//' \
    -e 's/;/\t/g' \
    -e 's/([0-9]+),([0-9]+)/\1.\2/g' \
  "$file" \
| tr -cd $'\11\12\15\40-\176' > "$tmp"

# Step 2: Generate new IDs for empty or non-numeric IDs
# - Find maximum numeric ID
# - Assign new IDs starting from max_id + 1
max_id=$(awk -F'\t' 'NR>1 && $1 ~ /^[0-9]+$/ {if ($1>m) m=$1} END{print m+0}' "$tmp")
next_id=$((max_id + 1))

awk -F'\t' -v OFS='\t' -v new_id="$next_id" '
  NR == 1 {
    print
    next
  }
  $1 == "" || $1 !~ /^[0-9]+$/ {
    $1 = new_id++
  }
  { print }
' "$tmp"