#!/usr/bin/env bash
#===============================================================================
# empty_cells â€” Count empty cells per column in a delimited text file
# Usage: empty_cells <file> <separator>
#   <file>      Path to the input text file (e.g., bgg_dataset.txt)
#   <separator> Delimiter character (e.g., ";" or "," or "\t")
# Requirements:
#   - Bash shell, awk
#   - Input file must have a header row
#===============================================================================
set -euo pipefail
IFS=$'\n\t'

# Check arguments
if [[ $# -ne 2 ]]; then
  echo "Usage: $0 <file> <separator>" >&2
  exit 1
fi

file="$1"
sep="$2"

# Verify file readability
if [[ ! -r "$file" ]]; then
  echo "Error: Cannot read file '$file'" >&2
  exit 1
fi


# Process file with awk
awk -v FS="$sep" '
  BEGIN {
    OFS = ""
  }
  NR == 1 {
    # Read the header line, remove possible CR (\r)
    sub(/\r$/, "")
    for (i = 1; i <= NF; i++) {
      col[i] = $i
      count[i] = 0
    }
    n = NF
    next
  }
  # Skip empty lines
  NF == 0 { next } 
  { 
    sub(/\r$/, "") 
    if (NF > n) { 
      # Warn if this row has more fields than header
      printf("Warning: Line %d has more fields (%d) than header (%d)\n", NR, NF, n) > "/dev/stderr" 
    } 
    # For each expected column, count missing or empty values
    for (i = 1; i <= n; i++) { 
      if (i > NF || $i == "") { 
        count[i]++ 
      } 
    } 
  }
  END {
    # If there are no data rows, output a warning
    if (NR < 2) {
      print "Warning: no data rows found" > "/dev/stderr"
    }
    # Output results: column name and count
    for (i = 1; i <= n; i++) {
      printf("%s: %d\n", col[i], count[i])
    }
  }
' "$file"